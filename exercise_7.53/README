7.53 We are given an array that contains N numbers. We want to determine if there are two numbers whose sum equals a
given number K. For instance, if the input is 8, 4, 1, 6 and K is 1, then the answer is yes (4 and 6). A number may be
twice.

a. Give an O(N^2) algorithm to solve this problem.
    A nested for loop should suffice. - Commonly known as the "Brute force" method.

    ###
    # Console output
    ##

    Our array of random numbers:
    [14, 17, 6, 3, 18, 5, 6, 1, 13, 16]
    We are looking for a pair that gives out the sum: 4
    Pair found: 3 + 1 = 4
    Pair found: 1 + 3 = 4

b. Give an O(N log N) algorithm to solve this problem. (Hint: sort the items first. After that is done, you can solve
the problem in linear time).
    We can start out sorting the array with the help of heap sort, thereafter we can use a binary search to find the
    complementary integer.

    For an example, lets say we have an sorted array with following numbers A:=[1, 3, 4, 6, 7, 10]
    Now lets say our K will be 10, so with A[0] = 1, the complementary has to be K-A[0] = 9, so we should look for the
    element containing the value 9. It doesn't exist. So lets try with A[1] = 3, K-A[1] = 7, which exists at A[4]. Now
    if we sum up A[1] + A[4] = 10 = K.

    Conclusion, start out with a heap sort, then next a binary search.

    BinarySearch(start, mid, end, complementaryInteger){
        if(myArray[start] == complementaryInteger){
            return myArray[start];
        }

        if(myArray[end] == complementaryInteger){
            return myArray[end];
        }

        if(myArray[mid] == complementaryInteger){
            return myArray[mid];
        }


        if(myArray[start] > complementaryInteger){
            return false;
        }

        if(myArray[end] < complementaryInteger){
            return false;
        }

        if(myArray[mid] > complementaryInteger){
            BinarySearch(start, floor(mid/2), mid-1, complementaryInteger);
        }

        if(myArray[mid] < complementary){
            BinarySearch(mid+1, ceil(mid*2), end, complementaryInteger);
        }
    },

